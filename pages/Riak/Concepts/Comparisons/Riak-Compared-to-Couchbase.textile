This is intended to be a brief, objective and technical comparison of Riak and Couchbase (i.e. Couchbase Server).  The Couchbase version described is 2.0. The Riak version described is Riak 1.1.x. If you feel this comparison is unfaithful at all for whatever reason, please "fix it":https://github.com/basho/riak_wiki/issues/new or send an email to **docs@basho.com**.


h2. At A Very High Level


* Riak is Apache 2.0 licensed; Couchbase Community (free version) is licensed under a [["community agreement"|http://www.couchbase.com/agreement/community]] (its backend, CouchDB is Apache 2.0 licensed).
* Riak is written primarily in Erlang with some bits in C; Couchbase is written in Erlang and C/C++

<div class="note"><div class="title">Couchbase vs CouchDB</div>There exists some confusion among users about the difference between Couchbase and CouchDB.  CouchDB is an open source document database.  Couchbase uses CouchDB as its backend, "wrapping" it with caching, clustering, and other advanced features.</div>

h2. Feature/Capability Comparison

The table below gives a high level comparison of Riak and Couchbase features/capabilities.  To keep this page relevant in the face of rapid development on both sides, low level details are found in links to Riak and Couchbase online documentation.

<br></br>

<table>
    <tr>

        <th WIDTH="15%">Feature/Capability</th>
        <th WIDTH="42%">Riak</th>
        <th WIDTH="43%">Couchbase</th>
    </tr>
    <tr>
        <td>Data Model</td>
        <td>Riak stores key/value pairs in a higher level namespsace called a bucket. 
			<ul>
			  <li>[[Buckets, Keys, and Values|Concepts#Buckets%2C-Keys%2C-and-Values]] </li>
			</ul>
		</td>
        <td>Couchbase can store any binary data.  Couchbase 2.0 combines the Membase Server key-value store with the CouchDB document database.  However, to use Couchbase's storage and retrieval features, data must be stored in the JSON format.  Some client libraries can serialize binary data into JSON objects so they can be indexed by Couchbase. 
	
			<ul>
			    <li>[[How Should I Store and Object?|http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-developing-bestpractices-objectstorage-how.html]]</li>
			  
			</ul>
		</td>
    </tr>
    <tr>
        <td>Storage Model</td>
        <td>Riak has a modular, extensible local storage system which lets you plug-in a backend store of your choice to suit your use case. The default backend is Bitcask.  
			<ul>
			  <li>[[Riak Supported Storage Backends|Storage-Backends]]</li>
			</ul>
		
		You can also write you own storage backend for Riak using our [[backend API|Backend API]].			
	 </td>
        <td> In version 2.0, Couchbase switched to using CouchDB as the database backend.  Prior versions of Couchbase use the SQLite storage engine.
			<ul>
			 <li>[[CouchDB|http://couchdb.apache.org/]]</li>
			<li>[[SQLite|http://www.sqlite.org/]]</li>
			</ul>
		</td>
    </tr>
    <tr>
        <td>Data Access and APIs</td>
        <td>Riak offers two primary interfaces (in addition to raw Erlang access):
			<ul>
			  <li>[[HTTP|HTTP API]]</li>
			<li>[[Protocol Buffers|PBC API]]</li>
			</ul>
			Riak Client libraries are wrappers around these APIs, and client support exists for dozens of languages. 
			<ul>
			  <li>[[Client-Libraries]]</li>
			  <li>[[Community Developed Libraries and Projects|Community-Developed-Libraries-and-Projects]]</li>
			</ul>
			</td>
        <td> Couchbase accesses data using the memcached protocol.  In almost all cases, this is done through a client library.  Couchbase supports libraries for numerous popular languages.  Couchbase also provides a REST API to monitor and manage a cluster, but it is not used to directly manage data in memory or on disk.

			<ul>	
				<li>[[Management REST API|http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-admin-restapi.html]]</li>
				<li>[[Client-Libraries|http://www.couchbase.com/develop]]</li>
				<li>[[memcached protocol|http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-architecture-apis-memcached-protocol.html]]</li>
				<li>[[Couchbase APIs|http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-architecture-apis.html]]</li>
			</ul>		
	 </td>
    </tr>
    <tr>
        <td>Query Types and Query-ability</td>
        <td>There are currently four ways to query data in Riak
			<ul>
			<li>Primary key operations (GET, PUT, DELETE, UPDATE)</li>
			<li>[[MapReduce]]</li>
			<li>[[Secondary Indexes]]</li>
			<li>[[Riak Search]]</li>
			<li>[[MapReduce Search 2i Comparison]]</li>
			</ul>
	
	</td>
        <td>In Couchbase, data is queried via secondary indexing and MapReduce.  Couchbases' implementation of this is done via "views".  Views assume data is stored in JSON format.  Non-JSON documents are ignored.  Indexing and querying operations are defined in a "design document", a JSON object with code that defines indexes and MapReduce queries.  Couchbase has also created a new open source querying language, Unstructured Data Query Language (UnQL) which aspires to become the standard querying language for the NoSQL space.  It is not currently included with Couchbase.  To support Hadoop, Couchbase has a plugin that steams data to a Hadoop Distributed File System (HDFS) or Hive for processing with Hadoop. 

				<ul>	
				<li>[[View Basics|http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-views-basics.html]]</li>
				<li>[[Views|http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-views.html]]</li>	
				<li>[[UnQL|http://www.unqlspec.org/display/UnQL/Home]]</li>	
				<li>[[Hadoop Connector|http://www.couchbase.com/develop/connectors/hadoop]]</li>
			<ul>	
	</td>
    </tr>
	<tr>
        <td>Data Versioning and Consistency</td>
        <td> Riak uses a data structure called a vector clock to reason about causality and staleness of stored values. Vector clocks enable clients to always write to the database in exchange for consistency conflicts being resolved at read time by either application or client code. Vector clocks can be configured to store copies of a given datum based on size and age of said datum.   There is also an option to disable vector clocks and fall back to simple time-stamp based "last-write-wins". 	
			<ul>
			  <li>[[Vector Clocks]]</li>
			  <li>[[Why Vector Clocks Are Easy|http://basho.com/blog/technical/2010/01/29/why-vector-clocks-are-easy/]]</li>
			  <li>[[Why Vector Clocks Are Hard|http://basho.com/blog/technical/2010/04/05/why-vector-clocks-are-hard/]]</li>
			</ul>
		 </td>
		
        <td>
	MARK:  it doesn't appear the Couchbase documentation addresses this directly (or at least my initial search didn't find it).  Below are the relevant Google results I found.  Might point in the right direction?
	
	Google results for 'couchbase consistency'
	http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-backup-restore.html
	http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-backup-restore.html
	http://www.couchbase.com/forums/thread/durability-consistency-enhancement
	
	Google results for 'couchbase data versioning'
	http://blog.couchbase.com/simple-document-versioning-couchdb
	http://www.couchbase.com/forums/thread/schema-changes-couchbase
	(from 1.8 manual) http://www.couchbase.com/docs/moxi-manual-1.8/moxi-internals-reconfig.html
	

    </tr>
        <td>Concurrency</td>
        <td> In Riak, any node in the cluster can coordinate a read/write operation for any other node. Riak stresses availability for writes and reads, and puts the burden of resolution on the client at read time.
		 </td>
		
        <td>Couchbase
	
	http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-architecture-diskstorage-consequences.html
	http://stackoverflow.com/questions/10333539/couchbase-1-8-0-concurrency-number-of-concurrent-req-support-in-java-client-ser
	(from 1.8 manual) http://www.couchbase.com/docs/moxi-manual-1.8/moxi-standalone-concurrency.html
			
	 </td>
    </tr>
    <tr>
        <td>Replication</td>
        <td>Riak's replication system is heavily influence by the Dynamo Paper and Dr. Eric Brewer's CAP Theorem. Riak uses consistent hashing to replicate and distribute N copies of each value around a Riak cluster composed of any number of physical machines. Under the hood, Riak uses virtual nodes to handle the distribution and dynamic rebalancing of data, thus decoupling the data distribution from physical assets.
			<ul>
			  <li>[[Replication]]</li>
			  <li>[[Clustering|Concepts#Clustering]]</li>
			</ul>
			
			The Riak APIs expose tunable consistency and availability parameters that let you select which level configuration is best for you use case. Replication is configurable at the bucket level when first storing data in Riak. Subsequent reads and writes to that data can have request-level parameters.
				<ul>
					<li>[[Reading, Writing, and Updating Data|Concepts#Reading%2C-Writing%2C-and-Updating-Data]]</li>
				</ul>	
			
	 </td>
        <td>Couchbase supports two types of replication.  For intra-datacenter clusters, Couchbase uses membase-style replication, which favors immediate consistency in the face of a network partition.  For multi-datacenter deployments, CouchDB-style replication is used.
	
	MARK:  above text taken from interview with Couchbase co-founder (below)
	
	http://www.infoq.com/news/2012/05/couchdb-vs-couchbase-membase
	Couchbase Server actually includes two kinds of “replication” technology: For intra-datacenter deployments (a cluster), Membase-style replication (which favors immediate consistency in the face of a network partition) is used as it provides the most natural development model and the likelihood of a split-brain network partition can be engineered to be statistically less probable than an asteroid collision with the data center. For inter-datacenter deployments (where clusters are geographically distributed) the likelihood of a split-brain network partition is very high, since application servers AND database servers live on both sides of a (relatively) fragile WAN connection. CouchDB-style replication is used in cross-datacenter deployments as it supports conflict detection and resolution which is more likely in this scenario. 
	
Below are possibly good links?
			<ul>	
			<li>[[CouchDB Replication|http://wiki.apache.org/couchdb/Replication]]</li>
			<li>[[Memcache Tap|http://code.google.com/p/memcached/wiki/Tap]]</li>
			http://en.wikipedia.org/wiki/Membase#Replication_and_failover

			</ul>			
	 </td>
    </tr>
    <tr>
        <td>Scaling Out and In</td>
        <td>Riak allows you to elastically grow and shrink your cluster while evenly balancing the load on each machine. No node in Riak is special or has any particular role. In other words, all nodes are masterless. When you add a physical machine to Riak, the cluster is made aware of its membership via gossiping of ring state. Once it's a member of the ring, it's assigned an equal percentage of the partitions and subsequently takes ownership of the data belonging to those partitions. The process for removing a machine is the inverse of this. Riak also ships with a comprehensive suite of command line tools to help make node operations simple and straightforward. 
	
	<ul>
		<li>[[Adding and Removing Nodes]]</li>
		<li>[[Command Line Tools]]</li>
	</ul>
		</td>
        <td>Couchbase scales elastically via auto-sharding. 
		
			<ul>
				<li>[[Growing your Cluster|http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-admin-tasks-addremove-growing.html]]</li>
				<li>[[Shrinking your Cluster|http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-admin-tasks-addremove-shrinking.html]]</li>
				<li>[[Rebalancing|http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-admin-tasks-addremove-rebalancing.html]]</li>
			  	<li>[[RightScale|http://www.couchbase.com/partners/rightscale]]</li>
				<li>[[Clone to Grow with Auto Sharding|http://www.couchbase.com/couchbase-server/features#clone_to_grow]]</li>

	</td>
    </tr>
    <tr>
        <td>Multi-Data Center Replication and Awareness</td>

		<td>Riak features two distinct types of replication. Users can replicate to any number of nodes in one cluster (which is usually contained within one data center over a LAN) using the Apache 2.0 database. Riak Enterprise, Basho's commercial extension to Riak, is required for Multi-Data Center deployments (meaning the ability to run active Riak clusters in N data centers). 
		
		<ul>
			<li><a href="http://basho.com/products/riak-enterprise/">Riak Enterprise</a></li>
		</ul>
		
		</td>	
        <td>Couchbase leverages the memcached storage engine interface and the Couchbase Bucket Engine to enable isolated buckets that support multi-tenancy. 
		
			<ul>			<li>[[Buckets|http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-introduction-architecture-buckets.html]]</li>		
			</ul>
	
	</td>
    </tr>
    <tr>
        <td>Graphical Monitoring/Admin Console</td>
        <td>Starting with Riak 1.1.x, Riak ships with Riak Control, an open source graphical console for monitoring and managing Riak clusters.
			<ul>
				<li>[[Riak Control]]</li>
				<li>[[Introducing Riak Control|http://basho.com/blog/technical/2012/02/22/Riak-Control/]]
			</ul>
	</td>
        <td>Couchbase provides a web-based monitoring/admin console.  
			<ul>
				<li>[[Admin Wed Console|http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-admin-web-console.html]]</li>	
				<li>[[Monitoring Couchbase|http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-monitoring.html]]</li>			
			</ul>

	 </td>
    </tr>
</table>
